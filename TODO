---
Short Term Plans
---
TODO:
	-add a level editor screen.
	-events
		Questions:
			-what about larger levels, adding balls, naming the level,
			-buttons like save, load, undo, redo, etc.
		Solutions:
			-have another pseudo screen which is for the editing level.
				-this pseudo screen can be adjusted in scale, and the number of blocks wide and high and the size of the level can be adjusted.
			-have a pseudo screen for the tool bars.
		-click and drag for placing lines of blocks. (single flows natural)
			-figure out how to alias the line.
	-graphical format
		-
	-storage format
		-basic text file.
		-ability to save locally.
		-add the ability to have multiple balls.
	-add a level selection screen with a mini preview of the level.
	-add an arrow overlay to where the player is doing their swipe.
		-add a drag event, which updated on mouse move after mousedown,
		until mouseup.
		-the event should be passed a start and current coord parameters.
		-It should be updated every mouse move.
		-WHat about on mouseup release?
	-ready for alpha release.
	-error console, in the form of messages. A new P tag for every message/
		as well as the time it happened and what kind of error/warning it was.
		different from the debug screen. These messages can't be changed.
		Mostly for exception handling.
	-track various stats
		-time, smallest isolation, largest isolation, most walls at same time.
	-Clean up engine code, and keep it as uncoupled, etc, as possible!
	-Refine like crazy and then release.
	
IMPROVEMENTS:
-the ballGame screen class should be turned into the class "gameplay",
all onload stuff should be put in a new ballGame.js file, while the screen stuff should be put in gameplay.js.
-public Methods have capitalized camel casing, and private ones have an underscore preceeding and regular camel casing. member variables have regular camel casing.
-remove graphics engine coupling from entire game class. (scale is prob)
-have event listener use jQuery for events and use namespacing.
-events should be completely wrapper to stay agnostic.
	-this includes wrapping the event object inside the called method.
-dragging for walls should be the same event for iphone drag and click and drag.
-add mouse move event in case the person hovers over the options.
	-if an option is hovered over, it is considered to be
	keyed to.
	-add click, for if the person clicks inside one of the options.
-When you close a window, it shouldn't matter whether it is overlay or not, the engine should handle how to close it. Closing by the screen itsself should be context insensative.
-their should be defaults for most functions. Getting started with my engine should be a snap.
	-The draw text requires setup with fonts, baseline, fontsize, etc. It shouldn't require it.
-How to pass collision information and improve my physics bounce.
-multiplayer one player tries to isolate, the other tries to open up.
	-time based, and the isolater is trying to gain time, while the other tries to stop them from completing the level.

DONE:
	(10/6/10)-put a debugger in the gameEngine. One that uses an associative array.
	(10/6/10)-Create engine. Engine contains everything for running A game... what game doesn't matter. This will contain: ticker, canvas, game, and maybe other things. It will control the loop among other things.
	(10/8/10)-get box2D to work, using the same interface as myPhysics (interface already done). what do i do with drawing?
	(10/8/10)-Integrate box2d with current game, but with my own graphics.
	(10/9/10)-remove event stuff and put it in the file extracrap.js
	(10/9/10)-give the ball and rectangle position objects, then pass that object to
		the box2d physics object. test to ensure it works.
	(10/9/10)-take the velocity out of the game, and put it into myPhysics. 
	(10/9/10)- resolve Collision should be private, and it should have na update insteAD
	(10/9/10)-add x and y to the constructor of Ball, and set the pos by that.
	(10/9/10)-give Ball a proper constructor.
	(10/9/10)-integrate the velocities of my game ball and the physics.
	(10/10/10)-add a timing regular for update.
	(10/11/10)-make sure game doesn't store anything to do with the DOM or anything like that. Truly the DOM should be non-existant in the game.
		-wrap canvas stuff into a drawing engine in gameEngine.
		-class names should be like "canvasEngine" or "domEngine"
		-I should set the drawEngine variable in gameEngine, then call the
		member variables to draw things.
	(10/11/10)-draw the map, by drawing rectangles... not using the map.
	(10/11/10)-implemented gamespeed to work.
	(10/13/10)-add Eventlistener class and attach it to the gameEngine.
	(10/13/10)-Transfer the pause functionality to this EventListener.
	(10/13/10)-add a debug statement to track the number of threads
					-learned JS is reentreant. Fake threading.
	(10/13/10)-add a DOMGraphics engine class.
	(4/13/11)-Register wall building coords on click.
	(4/13/11)-prepare wall building animation and stat changes, then have them change
	and further, have the graphic show up.
	(4/13/11)-add physics to the wall that is being showed up, using the 
	changing stats of the wall.
	(5/12/11)-did some other crap.
	(5/16/11)-implemented dividers horizontally. then test them.
		-now how will i do the controls for this?
			-click and drag, and if their is more x drag than y, or vice versa,
			then we choose that axis.
